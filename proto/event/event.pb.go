// Code generated by protoc-gen-go.
// source: github.com/micro/event-srv/proto/event/event.proto
// DO NOT EDIT!

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/event-srv/proto/event/event.proto

It has these top-level messages:
	ReadRequest
	ReadResponse
	CreateRequest
	CreateResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	SearchRequest
	SearchResponse
	StreamRequest
	StreamResponse
*/
package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import event1 "github.com/micro/go-platform/event/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReadRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ReadResponse struct {
	Record *event1.Record `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadResponse) GetRecord() *event1.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type CreateRequest struct {
	Record *event1.Record `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateRequest) GetRecord() *event1.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type UpdateRequest struct {
	Record *event1.Record `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateRequest) GetRecord() *event1.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type SearchRequest struct {
	// optional root_id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// optional
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// timeseries bounds
	From int64 `protobuf:"varint,3,opt,name=from" json:"from,omitempty"`
	To   int64 `protobuf:"varint,4,opt,name=to" json:"to,omitempty"`
	// range bounds
	Limit  int64 `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
	// order
	Reverse bool `protobuf:"varint,7,opt,name=reverse" json:"reverse,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SearchResponse struct {
	Records []*event1.Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SearchResponse) GetRecords() []*event1.Record {
	if m != nil {
		return m.Records
	}
	return nil
}

type StreamRequest struct {
	// types to watch
	Types []string `protobuf:"bytes,1,rep,name=types" json:"types,omitempty"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type StreamResponse struct {
	Record *event1.Record `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *StreamResponse) Reset()                    { *m = StreamResponse{} }
func (m *StreamResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()               {}
func (*StreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StreamResponse) GetRecord() *event1.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func init() {
	proto.RegisterType((*ReadRequest)(nil), "ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "ReadResponse")
	proto.RegisterType((*CreateRequest)(nil), "CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "CreateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
	proto.RegisterType((*StreamRequest)(nil), "StreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "StreamResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Event service

type EventClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	Stream(ctx context.Context, in *StreamRequest, opts ...client.CallOption) (Event_StreamClient, error)
	// should not really be used since event sourcing is append only
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type eventClient struct {
	c           client.Client
	serviceName string
}

func NewEventClient(serviceName string, c client.Client) EventClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "event"
	}
	return &eventClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *eventClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Event.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Event.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Event.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) Stream(ctx context.Context, in *StreamRequest, opts ...client.CallOption) (Event_StreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "Event.Stream", &StreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &eventStreamClient{stream}, nil
}

type Event_StreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamResponse, error)
}

type eventStreamClient struct {
	stream client.Streamer
}

func (x *eventStreamClient) Close() error {
	return x.stream.Close()
}

func (x *eventStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *eventStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *eventStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Event.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Event.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Event service

type EventHandler interface {
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	Stream(context.Context, *StreamRequest, Event_StreamStream) error
	// should not really be used since event sourcing is append only
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterEventHandler(s server.Server, hdlr EventHandler) {
	s.Handle(s.NewHandler(&Event{hdlr}))
}

type Event struct {
	EventHandler
}

func (h *Event) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.EventHandler.Read(ctx, in, out)
}

func (h *Event) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.EventHandler.Create(ctx, in, out)
}

func (h *Event) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.EventHandler.Search(ctx, in, out)
}

func (h *Event) Stream(ctx context.Context, stream server.Streamer) error {
	m := new(StreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.EventHandler.Stream(ctx, m, &eventStreamStream{stream})
}

type Event_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamResponse) error
}

type eventStreamStream struct {
	stream server.Streamer
}

func (x *eventStreamStream) Close() error {
	return x.stream.Close()
}

func (x *eventStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *eventStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *eventStreamStream) Send(m *StreamResponse) error {
	return x.stream.Send(m)
}

func (h *Event) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.EventHandler.Update(ctx, in, out)
}

func (h *Event) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.EventHandler.Delete(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xdf, 0x4e, 0xea, 0x40,
	0x10, 0xc6, 0xf9, 0x5b, 0x0e, 0x03, 0x2d, 0x27, 0xbd, 0x39, 0x7b, 0x30, 0x31, 0xa6, 0x89, 0x11,
	0x35, 0x14, 0x83, 0xbe, 0x81, 0xfa, 0x02, 0x18, 0x1f, 0xa0, 0x94, 0x29, 0x34, 0xa1, 0x6c, 0xdd,
	0x5d, 0x48, 0x7c, 0x0c, 0xdf, 0xd8, 0xd9, 0xdd, 0x36, 0xb6, 0xa8, 0xd1, 0x9b, 0xa6, 0xb3, 0xf3,
	0xfb, 0x66, 0x67, 0xe6, 0x5b, 0x98, 0xaf, 0x53, 0xb5, 0xd9, 0x2f, 0xc3, 0x98, 0x67, 0xb3, 0x2c,
	0x8d, 0x05, 0x9f, 0xe1, 0x01, 0x77, 0x6a, 0x2a, 0xc5, 0x61, 0x96, 0x0b, 0xae, 0x8a, 0xd8, 0x7e,
	0x43, 0x73, 0x32, 0xbe, 0xfb, 0xa4, 0x59, 0xf3, 0x69, 0xbe, 0x8d, 0x54, 0xc2, 0x45, 0x56, 0xf0,
	0x15, 0xad, 0x55, 0x05, 0xff, 0x61, 0xb0, 0xc0, 0x68, 0xb5, 0xc0, 0x97, 0x3d, 0x4a, 0xe5, 0x03,
	0xb4, 0xd2, 0x15, 0x6b, 0x9e, 0x35, 0x27, 0xfd, 0xe0, 0x02, 0x86, 0x36, 0x25, 0x73, 0xbe, 0x93,
	0xe8, 0xff, 0x03, 0x47, 0x60, 0xcc, 0x85, 0xcd, 0x0f, 0xe6, 0xbd, 0x70, 0x61, 0xc2, 0x60, 0x02,
	0xee, 0xbd, 0xc0, 0x48, 0x61, 0x59, 0xe5, 0x5b, 0xf2, 0x2f, 0x78, 0x25, 0x69, 0x8b, 0x6a, 0xed,
	0x73, 0xbe, 0xfa, 0xa5, 0xb6, 0x24, 0x0b, 0xed, 0x09, 0xb8, 0x0f, 0xb8, 0xc5, 0x0f, 0x6d, 0xb5,
	0x7b, 0xc2, 0xcb, 0x64, 0x81, 0x4b, 0x70, 0x9f, 0x30, 0x12, 0xf1, 0xe6, 0x0b, 0xdc, 0x1f, 0x42,
	0x47, 0xbd, 0xe6, 0xc8, 0x5a, 0x65, 0x94, 0x08, 0x9e, 0xb1, 0x36, 0x45, 0x6d, 0xcd, 0x29, 0xce,
	0x3a, 0xe6, 0xdf, 0x85, 0xee, 0x36, 0xcd, 0x52, 0xc5, 0xba, 0x26, 0xf4, 0xc0, 0xe1, 0x49, 0x22,
	0x51, 0x31, 0xc7, 0xc4, 0x23, 0xe8, 0x09, 0x5a, 0xaf, 0x90, 0xc8, 0x7a, 0x74, 0xf0, 0x27, 0xb8,
	0x02, 0xaf, 0xbc, 0xb4, 0x58, 0x23, 0xd3, 0x88, 0x9e, 0x48, 0xd2, 0xd5, 0xed, 0xea, 0x84, 0xa7,
	0xd4, 0xa0, 0xa2, 0xf5, 0x64, 0x65, 0x83, 0x74, 0x99, 0x6e, 0xca, 0x82, 0xfd, 0xe0, 0x92, 0x6a,
	0x15, 0xf9, 0x1f, 0x2c, 0x99, 0xbf, 0xb5, 0xa0, 0xfb, 0xa8, 0x6d, 0xf6, 0xcf, 0xa1, 0xa3, 0x5d,
	0xf4, 0x87, 0x61, 0xc5, 0xe7, 0xb1, 0x1b, 0x56, 0xad, 0x0d, 0x1a, 0xfe, 0x35, 0x38, 0xd6, 0x19,
	0xdf, 0x0b, 0x6b, 0x66, 0x8e, 0x47, 0xe1, 0x91, 0x65, 0x06, 0xb6, 0x43, 0x11, 0x5c, 0x5b, 0x29,
	0xc1, 0xf5, 0x69, 0x09, 0x9e, 0x12, 0x6c, 0xba, 0xd6, 0x70, 0x75, 0x3c, 0x0d, 0xd7, 0xc6, 0x09,
	0x1a, 0x37, 0x4d, 0x5d, 0xdb, 0xda, 0x4c, 0x78, 0xed, 0x65, 0x10, 0x7e, 0xe4, 0xbf, 0x69, 0xc4,
	0x9a, 0x4c, 0x70, 0xed, 0x29, 0x10, 0x7c, 0xe4, 0x7e, 0x63, 0xe9, 0x98, 0x17, 0x7f, 0xfb, 0x1e,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0xfc, 0x4d, 0x12, 0x5d, 0x03, 0x00, 0x00,
}
